/**
 * Migration Script: Fix Turkish Character Encoding in Database
 */

const mongoose = require('mongoose');
require('dotenv').config();

// Character mapping for fixing encoding
const charMap = {
    'TÔøΩrk': 'T√ºrk',
    'MutfaÔøΩÔøΩ': 'Mutfaƒüƒ±',
    'MutfaÔøΩ': 'Mutfaƒüƒ±',
    'AtatÔøΩrk': 'Atat√ºrk',
    'MuratpaÔøΩa': 'Muratpa≈üa',
    'YÔøΩlmaz': 'Yƒ±lmaz',
    'TÔøΩrkÔøΩe': 'T√ºrk√ße',
    'ÔøΩstanbul': 'ƒ∞stanbul',
    'ÔøΩiÔøΩli': '≈ûi≈üli',
    'KadÔøΩkÔøΩy': 'Kadƒ±k√∂y',
    'BeÔøΩiktaÔøΩ': 'Be≈üikta≈ü',
    '√úsk√ºdar': '√úsk√ºdar',
    'BakÔøΩrk√∂y': 'Bakƒ±rk√∂y',
    '√úmraniye': '√úmraniye',
    'Sarƒ±yer': 'Sarƒ±yer',
    '√áekmek√∂y': '√áekmek√∂y',
    'K√º√ß√ºk√ßekmece': 'K√º√ß√ºk√ßekmece',
    'B√ºy√ºk√ßekmece': 'B√ºy√ºk√ßekmece',
    '≈ûi≈ühane': '≈ûi≈ühane',
    'Galataport': 'Galataport',
    'Emin√∂n√º': 'Emin√∂n√º',
    'Fatih': 'Fatih',
    'Zeytinburnu': 'Zeytinburnu',
    'G√ºng√∂ren': 'G√ºng√∂ren',
    'Esenler': 'Esenler',
    'Gaziosmanpa≈üa': 'Gaziosmanpa≈üa',
    'Sultangazi': 'Sultangazi',
    'Arnavutk√∂y': 'Arnavutk√∂y',
    'Ey√ºpsultan': 'Ey√ºpsultan',
    'Bayrampa≈üa': 'Bayrampa≈üa',
    '√áatalca': '√áatalca',
    'Silivri': 'Silivri',
    'B√ºy√ºkada': 'B√ºy√ºkada',
    'Heybeliada': 'Heybeliada',
    'Burgazada': 'Burgazada',
    'Kƒ±nalƒ±ada': 'Kƒ±nalƒ±ada',
    '≈ûile': '≈ûile',
    '√áekmek√∂y': '√áekmek√∂y',
    'Sancaktepe': 'Sancaktepe',
    'Sultanbeyli': 'Sultanbeyli',
    'Pendik': 'Pendik',
    'Tuzla': 'Tuzla',
    'Maltepe': 'Maltepe',
    'Kartal': 'Kartal',
    'Adalar': 'Adalar',
    'Ata≈üehir': 'Ata≈üehir',
    'ÔøΩ': '√º',
    'ÔøΩ': '√ß', 
    'ÔøΩ': 'ƒü',
    'ÔøΩ': 'ƒ±',
    'ÔøΩ': 'ƒ∞',
    'ÔøΩ': '√∂',
    'ÔøΩ': '≈ü',
    'ÔøΩ': '√ú',
    'ÔøΩ': '√á',
    'ÔøΩ': 'ƒû',
    'ÔøΩ': '√ñ',
    'ÔøΩ': '≈û'
};

// Fix Turkish characters in text
function fixTurkishChars(text) {
    if (typeof text !== 'string') return text;
    
    let fixed = text;
    Object.keys(charMap).forEach(key => {
        fixed = fixed.replace(new RegExp(key, 'g'), charMap[key]);
    });
    
    return fixed;
}

// Fix Turkish characters in object recursively
function fixTurkishInObject(obj) {
    if (typeof obj === 'string') {
        return fixTurkishChars(obj);
    } else if (Array.isArray(obj)) {
        return obj.map(item => fixTurkishInObject(item));
    } else if (obj && typeof obj === 'object') {
        const fixed = {};
        Object.keys(obj).forEach(key => {
            fixed[key] = fixTurkishInObject(obj[key]);
        });
        return fixed;
    }
    return obj;
}

async function fixDatabase() {
    try {
        // Connect to database
        console.log('üîó Connecting to MongoDB...');
        await mongoose.connect(process.env.MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('‚úÖ Connected to MongoDB');

        // Fix Applications collection
        console.log('\nüìã Fixing Applications collection...');
        const Application = require('../models/Application');
        const applications = await Application.find({});
        
        let appFixed = 0;
        for (const app of applications) {
            const originalDoc = app.toObject();
            const fixedDoc = fixTurkishInObject(originalDoc);
            
            // Check if anything changed
            if (JSON.stringify(originalDoc) !== JSON.stringify(fixedDoc)) {
                await Application.updateOne({ _id: app._id }, fixedDoc);
                appFixed++;
                console.log(`‚úÖ Fixed application: ${fixedDoc.businessName}`);
            }
        }
        console.log(`üìã Fixed ${appFixed} applications`);

        // Fix Restaurants collection
        console.log('\nüè™ Fixing Restaurants collection...');
        const Restaurant = require('../models/Restaurant');
        const restaurants = await Restaurant.find({});
        
        let restFixed = 0;
        for (const restaurant of restaurants) {
            const originalDoc = restaurant.toObject();
            const fixedDoc = fixTurkishInObject(originalDoc);
            
            // Check if anything changed
            if (JSON.stringify(originalDoc) !== JSON.stringify(fixedDoc)) {
                await Restaurant.updateOne({ _id: restaurant._id }, fixedDoc);
                restFixed++;
                console.log(`‚úÖ Fixed restaurant: ${fixedDoc.name}`);
            }
        }
        console.log(`üè™ Fixed ${restFixed} restaurants`);

        console.log('\nüéâ Database fix completed successfully!');
        console.log(`üìä Total fixed: ${appFixed} applications, ${restFixed} restaurants`);
        
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Database fix failed:', error);
        process.exit(1);
    }
}

// Run if called directly
if (require.main === module) {
    fixDatabase();
}

module.exports = { fixTurkishChars, fixTurkishInObject, fixDatabase };