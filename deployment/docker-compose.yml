# KAPTAZEAPPV5 - Docker Deployment Configuration
# .com.tr domain ile production deployment

version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: kaptaze-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: kaptazeappv5
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - kaptaze-network
    ports:
      - "27017:27017"

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    container_name: kaptaze-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - kaptaze-network
    ports:
      - "6379:6379"

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: kaptaze-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/kaptazeappv5
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: https://kaptazeapp.com.tr
      
      # İyzico Configuration
      IYZICO_API_KEY: ${IYZICO_API_KEY}
      IYZICO_SECRET_KEY: ${IYZICO_SECRET_KEY}
      IYZICO_BASE_URL: https://api.iyzipay.com
      
      # PayTR Configuration
      PAYTR_MERCHANT_ID: ${PAYTR_MERCHANT_ID}
      PAYTR_MERCHANT_KEY: ${PAYTR_MERCHANT_KEY}
      PAYTR_MERCHANT_SALT: ${PAYTR_MERCHANT_SALT}
      
      # Firebase Configuration
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL}
      
      # Email Configuration
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      
      # Cloudinary Configuration
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      
    depends_on:
      - mongodb
      - redis
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - kaptaze-network
    ports:
      - "5000:5000"

  # Ana Portal (Static Web)
  main-portal:
    build:
      context: ../frontend/main-portal
      dockerfile: Dockerfile
    container_name: kaptaze-main-portal
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DOMAIN: kaptazeapp.com.tr
    networks:
      - kaptaze-network
    ports:
      - "8080:80"

  # Frontend Web
  frontend-web:
    build:
      context: ../frontend/web
      dockerfile: Dockerfile
    container_name: kaptaze-frontend-web
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: https://api.kaptazeapp.com.tr
      REACT_APP_ENVIRONMENT: production
      REACT_APP_GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      REACT_APP_FIREBASE_CONFIG: ${FIREBASE_CONFIG}
    networks:
      - kaptaze-network
    ports:
      - "3000:80"

  # Admin Panel
  frontend-admin:
    build:
      context: ../frontend/admin
      dockerfile: Dockerfile
    container_name: kaptaze-frontend-admin
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: https://api.kaptazeapp.com.tr
      REACT_APP_ENVIRONMENT: production
    networks:
      - kaptaze-network
    ports:
      - "3001:80"

  # Restaurant Panel
  frontend-restaurant:
    build:
      context: ../frontend/restaurant
      dockerfile: Dockerfile
    container_name: kaptaze-frontend-restaurant
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: https://api.kaptazeapp.com.tr
      REACT_APP_ENVIRONMENT: production
    networks:
      - kaptaze-network
    ports:
      - "3002:80"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: kaptaze-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend-web
      - frontend-admin
      - frontend-restaurant
    networks:
      - kaptaze-network

  # Let's Encrypt SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: kaptaze-certbot
    restart: "no"
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./certbot-webroot:/var/www/certbot
    command: >
      certonly --webroot --webroot-path=/var/www/certbot
      --email info@kaptazeapp.com.tr
      --agree-tos --no-eff-email
      -d kaptazeapp.com.tr
      -d www.kaptazeapp.com.tr
      -d api.kaptazeapp.com.tr
      -d admin.kaptazeapp.com.tr
      -d restoran.kaptazeapp.com.tr

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus
    container_name: kaptaze-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - kaptaze-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana
    container_name: kaptaze-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_DOMAIN: monitor.kaptazeapp.com.tr
      GF_SERVER_ROOT_URL: https://monitor.kaptazeapp.com.tr
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3003:3000"
    networks:
      - kaptaze-network

  # Log Management
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: kaptaze-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - kaptaze-network
    ports:
      - "9200:9200"

  # Log Shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: kaptaze-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - backend_logs:/var/log/backend:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - kaptaze-network
    depends_on:
      - elasticsearch

  # Backup Service
  backup:
    image: mongo:6.0
    container_name: kaptaze-backup
    restart: "no"
    environment:
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_PASSWORD: ${MONGO_ROOT_PASSWORD}
      BACKUP_SCHEDULE: "0 2 * * *"  # Her gün saat 02:00
    volumes:
      - ./backup/scripts:/scripts:ro
      - backup_data:/backup
    networks:
      - kaptaze-network
    depends_on:
      - mongodb
    command: /scripts/backup.sh

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  backup_data:
    driver: local

networks:
  kaptaze-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16