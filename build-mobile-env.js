#!/usr/bin/env node

/**
 * Mobile Environment Variables Build Script
 * Creates environment configuration files for React Native app
 * Supports both development and production environments
 */

const fs = require('fs');
const path = require('path');

// Environment variables from process.env or defaults
const ENVIRONMENT = process.env.NODE_ENV || 'development';
const GOOGLE_MAPS_API_KEY = process.env.GOOGLE_MAPS_API_KEY || null;
const API_BASE_URL = process.env.API_BASE_URL || 'https://kaptaze-backend-api.onrender.com';

console.log('üîß Building mobile environment configuration...');
console.log(`üì± Environment: ${ENVIRONMENT}`);
console.log(`üóùÔ∏è Google Maps API Key: ${GOOGLE_MAPS_API_KEY ? 'Configured' : 'Missing'}`);
console.log(`üåê API Base URL: ${API_BASE_URL}`);

// Environment configuration template
const envConfigTemplate = `/**
 * Environment Configuration for KapTaze Mobile App
 * Generated by build-mobile-env.js
 * DO NOT EDIT THIS FILE MANUALLY - IT'S AUTO-GENERATED
 */

const ENV = {
  // Development environment
  development: {
    API_BASE_URL: 'http://localhost:5000',
    GOOGLE_MAPS_API_KEY: __DEV__ ? '${GOOGLE_MAPS_API_KEY || ''}' : null,
  },
  
  // Production environment  
  production: {
    API_BASE_URL: '${API_BASE_URL}',
    GOOGLE_MAPS_API_KEY: '${GOOGLE_MAPS_API_KEY || ''}',
  },
};

// Get current environment
const getCurrentEnv = () => {
  return __DEV__ ? 'development' : 'production';
};

// Export configuration for current environment
const config = ENV[getCurrentEnv()];

// Security check - mask API key in logs
console.log(\`üåç Environment: \${getCurrentEnv()}\`);
console.log(\`üîß Config loaded:\`, {
  hasApiKey: !!config.GOOGLE_MAPS_API_KEY,
  keyPreview: config.GOOGLE_MAPS_API_KEY ? 
    \`\${config.GOOGLE_MAPS_API_KEY.substring(0, 8)}...\${config.GOOGLE_MAPS_API_KEY.substring(config.GOOGLE_MAPS_API_KEY.length - 4)}\` : 
    'Not found',
  baseUrl: config.API_BASE_URL,
});

export default config;`;

// Write the configuration file
const configPath = path.join(__dirname, 'kaptazeuygulama', 'src', 'config', 'env.js');
const configDir = path.dirname(configPath);

// Ensure directory exists
if (!fs.existsSync(configDir)) {
  fs.mkdirSync(configDir, { recursive: true });
}

// Write configuration file
fs.writeFileSync(configPath, envConfigTemplate, 'utf8');

console.log(`‚úÖ Environment configuration written to: ${configPath}`);

// Create gitignore entries to prevent accidental commits
const gitignorePath = path.join(__dirname, 'kaptazeuygulama', '.gitignore');
let gitignoreContent = '';

if (fs.existsSync(gitignorePath)) {
  gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
}

// Add environment config to gitignore if not already present
const envIgnoreRule = '# Environment configuration\\nsrc/config/env.js\\n.env\\n.env.local\\n';

if (!gitignoreContent.includes('src/config/env.js')) {
  gitignoreContent += '\\n' + envIgnoreRule;
  fs.writeFileSync(gitignorePath, gitignoreContent, 'utf8');
  console.log('üìù Updated .gitignore to exclude environment files');
}

console.log('üéØ Mobile environment configuration complete!');

// Validation
if (!GOOGLE_MAPS_API_KEY) {
  console.warn('‚ö†Ô∏è  WARNING: GOOGLE_MAPS_API_KEY is not set. Maps functionality may not work.');
  console.warn('   Set environment variable: GOOGLE_MAPS_API_KEY=your_api_key');
}

// Success summary
console.log('\\nüìã Summary:');
console.log(`   ‚Ä¢ Environment: ${ENVIRONMENT}`);
console.log(`   ‚Ä¢ API Key: ${GOOGLE_MAPS_API_KEY ? '‚úÖ Configured' : '‚ùå Missing'}`);
console.log(`   ‚Ä¢ Base URL: ${API_BASE_URL}`);
console.log(`   ‚Ä¢ Config file: ${configPath}`);
console.log('\\nüöÄ Ready for build!');